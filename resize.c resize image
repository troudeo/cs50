/**
 * Copies a BMP piece by piece, just because.
 */
       
#include <stdio.h>
#include <stdlib.h>

#include "bmp.h"

int main(int argc, char *argv[])
{
    // ensure proper usage
    if (argc != 4)
    {
        fprintf(stderr, "Usage: ./resize scale infile outfile\n");
        return 1;
    }

    // remember filenames
    float n = atof(argv[1]);
    char *infile = argv[2];
    char *outfile = argv[3];
    
    
    if (n < 0 || n > 100) 
    {
        printf("n must be between 1 - 100 \n");
        return 5;
    }
    // open input file 
    FILE *inptr = fopen(infile, "r");
    if (inptr == NULL)
    {
        fprintf(stderr, "Could not open %s.\n", infile);
        return 2;
    }

    // open output file
    FILE *outptr = fopen(outfile, "w");
    if (outptr == NULL)
    {
        fclose(inptr);
        fprintf(stderr, "Could not create %s.\n", outfile);
        return 3;
    }

   
   
///////////////////////////////////////////////////////////////////////
  
if (n < 1)
 {
     
      // read infile's BITMAPFILEHEADER
    
    BITMAPFILEHEADER bf;
    BITMAPFILEHEADER bfnew;
    fread(&bf, sizeof(BITMAPFILEHEADER), 1, inptr);
    bfnew = bf;

    // read infile's BITMAPINFOHEADER
    BITMAPINFOHEADER bi;
    BITMAPINFOHEADER binew;
 
    fread(&bi, sizeof(BITMAPINFOHEADER), 1, inptr);
    
    binew = bi;
    

    // ensure infile is (likely) a 24-bit uncompressed BMP 4.0
    if (bf.bfType != 0x4d42 || bf.bfOffBits != 54 || bi.biSize != 40 || 
        bi.biBitCount != 24 || bi.biCompression != 0)
    {
        fclose(outptr);
        fclose(inptr);
        fprintf(stderr, "Unsupported file format.\n");
        return 4;
    }
    
    // change width and heigth
    binew.biHeight = bi.biHeight * n;
    binew.biWidth = bi.biWidth * n;
    
    //change padding
    int origpad =  (4 - (bi.biWidth * sizeof(RGBTRIPLE)) % 4) % 4;
    int padding =  (4 - (binew.biWidth * sizeof(RGBTRIPLE)) % 4) % 4;
    
    
    //change image size
    bfnew.bfSize = 54 + (binew.biWidth * sizeof(RGBTRIPLE) + padding) * abs(binew.biHeight);
    binew.biSizeImage = bfnew.bfSize - 54;
    
    // write outfile's BITMAPFILEHEADER
    fwrite(&bfnew, sizeof(BITMAPFILEHEADER), 1, outptr);

    // write outfile's BITMAPINFOHEADER
    fwrite(&binew, sizeof(BITMAPINFOHEADER), 1, outptr);

   
    RGBTRIPLE* newpix = malloc(sizeof(RGBTRIPLE));
    
    // iterate over infile's scanlines
    for (int i = 0, biHeight = abs(bi.biHeight); i < biHeight; i++)
    {

    
    
        // iterate over pixels in scanline
        for (int j = 0; j < bi.biWidth; j++)
        {
            // temporary storage
            RGBTRIPLE triple;

            // read RGB triple from infile
            fread(&triple, sizeof(RGBTRIPLE), 1, inptr);
            
            *newpix = triple;
            
            
            // write RGB triple to outfile
            
            fwrite(newpix, sizeof(RGBTRIPLE), 1, outptr);
            fseek(inptr, 1/n *sizeof(RGBTRIPLE) - sizeof(RGBTRIPLE), SEEK_CUR);
            j = j+  1/n -1;
            
        }

        //add padding
        for (int k = 0; k < padding; k++)
        {
            fputc(0x00, outptr);
        
        }
          
    
    fseek(inptr, origpad, SEEK_CUR);
    fseek(inptr, bi.biWidth*sizeof(RGBTRIPLE)+ origpad, SEEK_CUR);
    i = i+ 1/n -1;
    }

    // close infile
    fclose(inptr);

    // close outfile
    fclose(outptr);

    // success
    return 0;


}





/////////////////////////////////////////////////////////////////////
    if (n >= 1)
   { 
     // read infile's BITMAPFILEHEADER
    
    BITMAPFILEHEADER bf;
    BITMAPFILEHEADER bfnew;
    fread(&bf, sizeof(BITMAPFILEHEADER), 1, inptr);
    bfnew = bf;

    // read infile's BITMAPINFOHEADER
    BITMAPINFOHEADER bi;
    BITMAPINFOHEADER binew;
 
    fread(&bi, sizeof(BITMAPINFOHEADER), 1, inptr);
    
    binew = bi;
    

    // ensure infile is (likely) a 24-bit uncompressed BMP 4.0
    if (bf.bfType != 0x4d42 || bf.bfOffBits != 54 || bi.biSize != 40 || 
        bi.biBitCount != 24 || bi.biCompression != 0)
    {
        fclose(outptr);
        fclose(inptr);
        fprintf(stderr, "Unsupported file format.\n");
        return 4;
    }
    
    // change width and heigth
    binew.biHeight = bi.biHeight * n;
    binew.biWidth = bi.biWidth * n;
    
    //change padding
    int origpad =  (4 - (bi.biWidth * sizeof(RGBTRIPLE)) % 4) % 4;
    int padding =  (4 - (binew.biWidth * sizeof(RGBTRIPLE)) % 4) % 4;
    
    
    //change image size
    bfnew.bfSize = 54 + (binew.biWidth * sizeof(RGBTRIPLE) + padding) * abs(binew.biHeight);
    binew.biSizeImage = bfnew.bfSize - 54;
    
    // write outfile's BITMAPFILEHEADER
    fwrite(&bfnew, sizeof(BITMAPFILEHEADER), 1, outptr);

    // write outfile's BITMAPINFOHEADER
    fwrite(&binew, sizeof(BITMAPINFOHEADER), 1, outptr);


   
    
    // iterate over infile's scanlines
    for (int i = 0, biHeight = abs(bi.biHeight); i < biHeight; i++)
    {
    
    
    for (int rowcounter = 0; rowcounter < n; rowcounter ++)
    
    {
        // iterate over pixels in scanline
        for (int j = 0; j < bi.biWidth; j++)
        {
            // temporary storage
            RGBTRIPLE triple;

            // read RGB triple from infile
            fread(&triple, sizeof(RGBTRIPLE), 1, inptr);

            // write RGB triple to outfile
             for(int count = 0; count < n; count++)
            { 
            fwrite(&triple, sizeof(RGBTRIPLE), 1, outptr);
            }
        }

        //add padding
        for (int k = 0; k < padding; k++)
        {
            fputc(0x00, outptr);
        
        }
          if (rowcounter < (n - 1))
          {
                fseek(inptr, -(bi.biWidth * sizeof(RGBTRIPLE)), SEEK_CUR);
                
            
          }
    }
    fseek(inptr, origpad, SEEK_CUR);
}
    // close infile
    fclose(inptr);

    // close outfile
    fclose(outptr);

    // success
    return 0;

}
}
